
### How to iterate byte elements in a string?

In Go, strings are assumed as UTF-8 encoded.
`for-range` over a string will get the runes (Unicode code points) in the string.
Then how to get the byte elements in a string?
There are two ways to achieve this.
The performance of these two ways is substantially equivalent.

###======= Way 1: use `for;;` loop

''' Go
	for i := 0; i < len(aString); i++ {
		byteElement := aString[i]
		... // use byteElement
	}
'''

###======= Way 2: use `for-range` loop

The official Go compiler makes special optimizations
so that memory allocation and bytes duplication don't happen in
a conversion `[]byte(aString)` if the result byte slice (of the conversion)
is proven not to be used concurrently. For example, the conversion
following the `range` keyword doesn't allocate and duplicate the underlying bytes.

''' Go
	for _, byteElement := range []byte(aString) {
		... // use byteElement
	}
'''



