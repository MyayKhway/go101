
### How to iterate runes in a string?

In Go, strings are assumed as UTF-8 encoded.
Just `for-range` over a string to get the runes (Unicode code points) in the string.

''' Go
	for i, rune := range aString {
		... // use the rune
	}
'''

A rune might be composed of 1-4 bytes (called the length of the rune)
in UTF-8 encoding.
Here, `i` is the start index of the bytes of the rune.
The size (count of bytes) of each rune can be got but the process is not very smooth.
The following way is more smooth to rune sizes:

''' Go
import "unicode/utf8"

	var str = aString
	for {
		rune, size := utf8.DecodeRuneInString(str)
		if size == 0 {
			break
		}
		str = str[size:]
		
		... // use rune
	}
'''



